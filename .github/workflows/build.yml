name: Build
on: [push, workflow_dispatch]

jobs:
  delete-old-artifacts:
    runs-on: ubuntu-latest
    steps:
      - uses: kolpav/purge-artifacts-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          expire-in: 0
  linux-build:
    if: ${{ always() }}
    needs: delete-old-artifacts
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    name: Python ${{ matrix.python-version }} linux build
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - run: sudo apt-fast -y install gettext
      - run: python -m pip install build
      - run: python -m build
      - uses: actions/upload-artifact@v3
        with:
          name: linux_${{ matrix.python-version }}
          path: |
            build/*.zip
            dist/
          if-no-files-found: error
          retention-days: 90
  rpi-build:
    if: ${{ always() }}
    needs: delete-old-artifacts
    runs-on: ubuntu-latest
    name: Build ${{ matrix.arch }} ${{ matrix.python-version }}
    strategy:
      matrix:
        include:
        - arch: 'armv7'
          distro: 'archarm_latest'
        - arch: 'aarch64'
          distro: 'archarm_latest'
    steps:
      - uses: actions/checkout@v3
      - uses: uraimo/run-on-arch-action@v2
        id: build
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}
          setup: mkdir -p "${PWD}/artifacts"
          dockerRunArgs: --volume "${PWD}/artifacts:/artifacts"
          env: |
            release_name: "steam-tools-ng-RPI-${{ matrix.arch }}"
          shell: /bin/sh
          run: |
            pacman -Syu --noconfirm
            pacman -S --noconfirm python python-build tar
            python -m build
            cp -rfv dist/ /artifacts/
      - uses: actions/upload-artifact@v3
        with:
          name: rpi_${{ matrix.arch }}
          path: |
            artifacts/dist/
          if-no-files-found: error
          retention-days: 90
  windows-build:
    if: ${{ always() }}
    needs: delete-old-artifacts
    runs-on: windows-2022
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
    defaults:
      run:
        shell: cmd
        working-directory: .\\tools\Windows
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - run: python -m pip install certifi aiohttp cx_freeze pywin32 psutil stlib stlib-plugins
      - run: dist_script_native.cmd
      - uses: actions/upload-artifact@v3
        with:
          name: windows_${{ matrix.python-version }}
          path: |
            build/*.zip
            installer/build/*.exe
          if-no-files-found: error
          retention-days: 90
  deploy:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [linux-build, windows-build, rpi-build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
      - uses: softprops/action-gh-release@v1
        with:
          draft: true
          files: |
            linux_3.11/dist/*
            windows_3.11/installer/build/*.exe
            windows_3.10/build/*.zip
            windows_3.11/build/*.zip
            rpi_aarch64/dist/*.whl
            rpi_armv7/dist/*.whl
  pypi-upload:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [deploy]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ '3.11' ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages_dir: linux_${{ matrix.python-version }}/dist/
          verbose: true
          print_hash: true
  generate-badges:
    if: ${{ always() }}
    needs: [linux-build, windows-build, rpi-build]
    runs-on: ubuntu-latest
    env:
      linux-badge-color: ${{ needs.linux-build.result == 'success' && 'green' || 'red' }}
      windows-badge-color: ${{ needs.windows-build.result == 'success' && 'green' || 'red' }}
      rpi-badge-color: ${{ needs.rpi-build.result == 'success' && 'green' || 'red' }}
    steps:
      - uses: RubbaBoy/BYOB@v1.3.0
        with:
          NAME: steam-tools-ng-linux-build
          LABEL: 'Linux build'
          STATUS: ${{ needs.linux-build.result }}
          COLOR: ${{ env.linux-badge-color }}
          GITHUB_TOKEN: ${{ secrets.ACTIONS_TOKEN }}
          REPOSITORY: calendulish/.github
          ACTOR: calendulish
      - uses: RubbaBoy/BYOB@v1.3.0
        with:
          NAME: steam-tools-ng-windows-build
          LABEL: 'Windows build'
          STATUS: ${{ needs.windows-build.result }}
          COLOR: ${{ env.windows-badge-color }}
          GITHUB_TOKEN: ${{ secrets.ACTIONS_TOKEN }}
          REPOSITORY: calendulish/.github
          ACTOR: calendulish
      - uses: RubbaBoy/BYOB@v1.3.0
        with:
          NAME: steam-tools-ng-rpi-build
          LABEL: 'RPI build'
          STATUS: ${{ needs.rpi-build.result }}
          COLOR: ${{ env.rpi-badge-color }}
          GITHUB_TOKEN: ${{ secrets.ACTIONS_TOKEN }}
          REPOSITORY: calendulish/.github
          ACTOR: calendulish
